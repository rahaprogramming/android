
public class encryption {

    private static byte[] iv =
            { 0x0a, 0x01, 0x02, 0x03, 0x04, 0x0b, 0x0c, 0x0d };

    public static String encrypt(String encryptMe,
                                  String key) throws Exception {
        SecretKey secretKey = stringToKey(key);
        byte[] inpBytes = encryptMe.getBytes();
        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        IvParameterSpec ips = new IvParameterSpec(iv);
        cipher.init(Cipher.ENCRYPT_MODE, secretKey, ips);
        String s = new String( cipher.doFinal(inpBytes) );
        return s;
    }

    public static String decrypt(String decryptMe,
                                  String key) throws Exception {
        SecretKey secretKey = stringToKey(key);
        byte[] inpBytes = decryptMe.getBytes();
        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
        IvParameterSpec ips = new IvParameterSpec(iv);
        cipher.init(Cipher.DECRYPT_MODE, secretKey, ips);
        byte[] b =  cipher.doFinal(inpBytes);
        String s = new String( b );
        return s;
    }
    private static SecretKey stringToKey (String stringKey) {

        byte[] encodedKey     = Base64.decode(stringKey, Base64.DEFAULT);
        SecretKey originalKey = new SecretKeySpec(encodedKey, 0, encodedKey.length, "AES");
        return originalKey;
    }
    private String keyToString (SecretKey secretKey){
        String stringKey = "";

        try {secretKey = KeyGenerator.getInstance("AES").generateKey();}
        catch (NoSuchAlgorithmException e) {e.printStackTrace();}

        if (secretKey != null)
            stringKey = Base64.encodeToString(secretKey.getEncoded(), Base64.DEFAULT);
        return stringKey;
    }
}
