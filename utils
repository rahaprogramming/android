public class utils{
//get day of week
public String getDay(){
    String daysArray[] = {"Sun","Mon","Tue", "Wed","Thu","Fri", "Sat"};
    Calendar calendar = Calendar.getInstance();
    int day = calendar.get(Calendar.DAY_OF_WEEK);

    return daysArray[day];
}

//convert px to dp
public static float convertPixelsToDp(float px){
	  DisplayMetrics metrics = Resources.getSystem().getDisplayMetrics();
	  float dp = px / (metrics.densityDpi / 160f);
	  return Math.round(dp);
}
	//convert dp to px
public static float convertDpToPixel(float dp){
	  DisplayMetrics metrics = Resources.getSystem().getDisplayMetrics();
	  float px = dp * (metrics.densityDpi / 160f);
	  return Math.round(px);
 }
// load image from url
public boolean loadImageFromURL(String fileUrl, ImageView iv){
  try {
    URL myFileUrl = new URL (fileUrl);
    HttpURLConnection conn =
      (HttpURLConnection) myFileUrl.openConnection();
    conn.setDoInput(true);
    conn.connect();
    InputStream is = conn.getInputStream();
    iv.setImageBitmap(BitmapFactory.decodeStream(is));
    return true;
  } catch (MalformedURLException e) {
    e.printStackTrace();
  } catch (Exception e) {
    e.printStackTrace();
  }
  
  return false;
}
 //Convert image to Base64 String
    public String convertToBase64(String imagePath){
        Bitmap bm = BitmapFactory.decodeFile(imagePath);

        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        bm.compress(Bitmap.CompressFormat.JPEG, 01, baos);
        byte[] byteArrayImage = baos.toByteArray();
        String encodedImage = Base64.encodeToString(byteArrayImage, Base64.DEFAULT);
        return encodedImage;
    }
    //Decode base64 to bitmap
    public Bitmap decodeFromBase64ToBitmap(String encodedImage){
        byte[] decodedString = Base64.decode(encodedImage, Base64.DEFAULT);
        Bitmap decodedByte = BitmapFactory.decodeByteArray(decodedString, 0, decodedString.length);
        return decodedByte;
    }
    //uri to String filename only
    public String getFileName (Uri uri) {
        String result = null;
        if (uri.getScheme().equals("content")) {
            Cursor cursor = getContentResolver().query(uri, null, null, null, null);
            try {
                if (cursor != null && cursor.moveToFirst()) {
                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));
                }
            } finally {
                cursor.close();
            }
        }
        if (result == null) {
            result = uri.getPath();
            int cut = result.lastIndexOf('/');
            if (cut != -1) {
                result = result.substring(cut + 1);
            }
        }
        return result;
    }
    //uri to String filename with full path
    public String getFilePath(Uri uri) {
        String result = null;
        if (uri.getScheme().equals("content")) {
            Cursor cursor = getContentResolver().query(uri, null, null, null, null);
            try {
                if (cursor != null && cursor.moveToFirst()) {
                    result = uri.getPath();
                    result += cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));
                }
            } finally {
                cursor.close();
            }
        }
        if (result == null) {
            result = uri.getPath();
            int cut = result.lastIndexOf('/');
            if (cut != -1) {
                result = result.substring(cut + 1);
            }
        }
        return result;
    }
    
   //get useful permissions as array
   public static final String[] PERMISSIONS = {Manifest.permission.WRITE_EXTERNAL_STORAGE, Manifest.permission.ACCESS_FINE_LOCATION, Manifest.permission.ACCESS_COARSE_LOCATION};
   
   //timestamp
   public static long getTimestamp(){
        return System.currentTimeMillis() / 1000;
   }

   //Friday may 6, 2025
   public static String getLongDayName(long timestamp) {
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("EEEE", Locale.getDefault());
        return simpleDateFormat.format(new Date(timestamp * 1000));
   }

   //Fri
    public static String getShortDayName(long timestamp) {
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("E", Locale.getDefault());
        return simpleDateFormat.format(new Date(timestamp * 1000));
    }

  //no comments forthese common sense methods
  
  public static int randInt(Random random, int min, int max) {
        return random.nextInt((max - min) + 1) + min;
    }

    public static void checkRunningThread(String TAG) {
        Log.e(TAG, "Running in thread: " + Thread.currentThread().toString());
    }

    public static boolean isWifiON(Context context) {
        ConnectivityManager cm = (ConnectivityManager) context.getSystemService(Context.CONNECTIVITY_SERVICE);
        NetworkInfo activeNetwork = cm.getActiveNetworkInfo();
        return activeNetwork != null && activeNetwork.isConnectedOrConnecting() && activeNetwork.getType() == ConnectivityManager.TYPE_WIFI && Utils.isOnline();
    }

    public static boolean isOnline() {
        Runtime runtime = Runtime.getRuntime();
        try {
            Process ipProcess = runtime.exec("/system/bin/ping -c 1 8.8.8.8");
            int exitValue = ipProcess.waitFor();
            return (exitValue == 0);
        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
        }

        return false;
    }
 public static void createNotification(Context context, String message) {
        Intent intent = new Intent(context, MainActivity.class);
        intent.setFlags(Intent.FLAG_ACTIVITY_RESET_TASK_IF_NEEDED);
        PendingIntent pIntent = PendingIntent.getActivity(context, (int) System.currentTimeMillis(), intent, 0);

        // Build notification
        // Actions are just fake
        Notification noti = new Notification.Builder(context)
                .setAutoCancel(true)
                .setContentTitle("Snap")
                .setContentText(message)
                .setSmallIcon(android.R.drawable.ic_dialog_info)
                .setDefaults(Notification.DEFAULT_SOUND | Notification.DEFAULT_LIGHTS | Notification.DEFAULT_VIBRATE)
                .setContentIntent(pIntent)
                .build();

        NotificationManager notificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
        // hide the notification after its selected
        noti.flags |= Notification.FLAG_AUTO_CANCEL;
        notificationManager.notify(0, noti);
    }

    public static boolean checkIfGpsIsOn(Context context) {
        return ((LocationManager) context.getSystemService(Context.LOCATION_SERVICE)).isProviderEnabled(LocationManager.GPS_PROVIDER);
    }

    public static String returnAddress(Geocoder geocoder, double latitude, double longitude) {
        String address = String.valueOf(latitude) + " / " + String.valueOf(longitude);
        try {
            List<Address> addresses = geocoder.getFromLocation(latitude, longitude, 1);
            if (addresses.size() > 0) {
                address = "";
                for (int i = 0; i < addresses.get(0).getMaxAddressLineIndex(); i++) {
                    if (i != addresses.get(0).getMaxAddressLineIndex() - 1)
                        address += addresses.get(0).getAddressLine(i) + "\n";
                    else
                        address += addresses.get(0).getAddressLine(i);
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        return address;
    }

    public static boolean hasPermissions(Context context, String... permissions) {
        if (android.os.Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && context != null && permissions != null) {
            for (String permission : permissions) {
                if (ActivityCompat.checkSelfPermission(context, permission) != PackageManager.PERMISSION_GRANTED) {
                    return false;
                }
            }
        }
        return true;
    }

}
